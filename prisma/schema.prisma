datasource db {
  provider = "postgresql"
  url      = "postgresql://doadmin:AVNS_VV-WVmCWyEzwtX_TuoC@db-postgresql-fra1-11025-do-user-16352100-0.c.db.ondigitalocean.com:25060/stage?sslmode=require&connection_limit=100"
}

generator client {
  provider = "prisma-client-js"
}

model Lot {
  id     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source LotSourceEnum? @default(copart)

  vin      String  @unique @db.VarChar(250)
  sourceId String? @map("source_id") @db.VarChar(250)
  lotId    String? @map("lotId_id") @db.VarChar(250)

  title String @db.VarChar(250)

  make         String? @db.VarChar(250)
  model        String? @db.VarChar(250)
  series       String? @db.VarChar(250)
  year         String? @db.VarChar(250)
  fuel         String? @db.VarChar(250)
  cylinders    String? @db.VarChar(250)
  transmission String? @db.VarChar(250)
  color        String? @db.VarChar(250)
  engine       String? @db.VarChar(250)
  airbags      String? @db.VarChar(250)

  odometer String? @db.VarChar(250)
  odobrand String? @db.VarChar(250)
  drive    String? @db.VarChar(250)

  seller String?  @db.VarChar(250)
  keys   Boolean? @db.Boolean
  loss   String?  @db.VarChar(250)
  status String?  @db.VarChar(250)

  priceNew    String? @map("price_new") @db.VarChar(250)
  priceOld    String? @map("price_old") @db.VarChar(250)
  priceFuture String? @map("price_future") @db.VarChar(250)
  costPrice   String? @map("cost_price") @db.VarChar(250)
  costRepair  String? @map("cost_repair") @db.VarChar(250)

  auctionStatus String?   @map("auction_status") @db.VarChar(250)
  auctionType   String?   @map("auction_type") @db.VarChar(250)
  auctionDate   DateTime? @map("auction_date") @db.Timestamptz(6)
  bidOpen       Boolean?  @map("bid_open") @db.Boolean
  bid           String?   @db.VarChar(250)

  damagePr  String? @map("damage_pr") @db.VarChar(250)
  damageSec String? @map("damage_sec") @db.VarChar(250)

  vehicleType String? @map("vehicle_type") @db.VarChar(250)

  state    String? @db.VarChar(250)
  location String? @db.VarChar(250)
  document String? @db.VarChar(250)

  isArchived Boolean @default(false) @db.Boolean

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  files   File[]
  Payment Payment[]

  @@index([sourceId])
  @@index([lotId])
  @@index([vin])
  @@index([vin, isArchived])
}

model LotError {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  data Json @db.JsonB

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
}

model File {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  path   String? @db.VarChar(250)
  origin String  @unique @db.VarChar(250)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  Lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId String @db.Uuid

  @@index([lotId])
  @@map("files")
}

model CronJob {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String        @db.VarChar(250)
  createdAt  DateTime      @default(now())
  status     CronJobStatus @default(initialized)
  expression String        @db.VarChar(10)
  metadata   Json?         @db.Json

  @@map("cron_jobs")
}

model Payment {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  shopId   String              @map("shop_id") @db.VarChar(20)
  orderId  String              @unique() @map("order_id") @db.VarChar(20)
  amount   Float               @db.Real
  currency PaymentCurrencyEnum

  status PaymentStatusEnum @default(created)

  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: NoAction)
  lotId String @db.Uuid

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([orderId])
}

enum CronJobStatus {
  initialized
  processing
  error
  done

  @@map("cron_job_status")
}

enum LotSourceEnum {
  copart
  iaai

  @@map("lot_source")
}

enum PaymentStatusEnum {
  created
  success
  failed

  @@map("payment_status")
}

enum PaymentCurrencyEnum {
  USD
  RUB

  @@map("payment_currency")
}
